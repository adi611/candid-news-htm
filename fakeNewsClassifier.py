# -*- coding: utf-8 -*-
"""Fake News Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rkjug_9tn_3yK5uBMokHVP6VeQfL2c8o
"""

# !pip install pandas
# !pip install tensorflow
# !pip install nltk
# !pip install re
# !pip install h5py pyyaml

import pandas as pd
import os
from __future__ import absolute_import,division,print_function

df=pd.read_csv('/content/drive/MyDrive/Fake News Classifier Dataset/train.csv')
df.head()

df=df.dropna()

x=df.drop('label',axis=1)

y=df['label']

import tensorflow as tf
tf.__version__

from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense

voc_size=5000

messages=x.copy()
messages.reset_index(inplace=True)

import nltk
import re
from nltk.corpus import stopwords

nltk.download('stopwords')

from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()
corpus=[]
for i in range(0,len(messages)):
  print(i)
  review=re.sub('[^a-zA-Z]',' ',messages['title'][i])
  review=review.lower()
  review=review.split()

  review=[ps.stem(word) for word in review if not word in stopwords.words('english')]
  review= ' '.join(review)
  corpus.append(review)

onehot_repr=[one_hot(words,voc_size)for words in corpus]
onehot_repr
corpus

sent_length=20
embedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)
print(embedded_docs)

len(embedded_docs)

def create_model():
  embedding_vector_features=70
  model=Sequential()
  model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
  model.add(LSTM(100))
  model.add(Dense(1,activation='sigmoid'))
  model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
  return model
model=create_model()
print(model.summary())

import numpy as np
x_final=np.array(embedded_docs)
y_final=np.array(y)
x_final.shape,y_final.shape

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x_final,y_final,test_size=0.33,random_state=42)

checkpoint_path="/Model Weights/weights.shubhankan"
checkpoint_dir=os.path.dirname(checkpoint_path)
cp_callback = tf.keras.callbacks.ModelCheckpoint(checkpoint_path,save_weights_only=True,verbose=1)

model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=100,batch_size=128,callbacks=[cp_callback])

def predict_news(messages):
  ps=PorterStemmer()
  corpus=[]
  review=re.sub('[^a-zA-Z]',' ',messages)
  review=review.lower()
  review=review.split()
  review=[ps.stem(word) for word in review if not word in stopwords.words('english')]
  review= ' '.join(review)
  corpus.append(review)
  onehot_repr=[one_hot(words,voc_size)for words in corpus]
  sent_length=20
  embedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)
  x_predict=np.array(embedded_docs)
  model=create_model()
  model.load_weights(checkpoint_path)
  prediction = model.predict(x_predict)
  return prediction